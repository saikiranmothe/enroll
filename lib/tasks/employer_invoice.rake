namespace :employer_invoice do
  desc "Generates Invoices for Initial and Conversion Employers"
  task generate: :environment do

    DO_NOT_INVOICE_LIST = []

    @folder_name="DCEXCHANGE_#{TimeKeeper.date_of_record.strftime("%Y%m%d")}"
    
  	conversion_employers= Organization.where({
    :'employer_profile.profile_source' => 'conversion',
    :'employer_profile.plan_years' => { 
      :$elemMatch => {
          :"start_on" => { "$eq" => DateTime.parse("2016-09-01" ) } ,
          :"aasm_state".in =>  PlanYear::RENEWING_PUBLISHED_STATE 
        }
      }
    })

    new_employers = Organization.where({
      :'employer_profile.plan_years' => { 
       :$elemMatch => {
         :start_on =>  { "$eq" => DateTime.parse("2016-09-01" ) },
         :"aasm_state".in => PlanYear::PUBLISHED
       }}
    })

    generate_invoices(conversion_employers, false)
    # generate_invoices(new_employers, true)
   
    #Create a tar file 
    puts "creating a tar file now"
    	system("tar -zcvf #{@folder_name}.tar.gz #{@folder_name}")
    puts "Folder created!"

  end

  def generate_invoices(organizations, clean_up = nil )
    organizations.each do |org|
      unless DO_NOT_INVOICE_LIST.include?(org.fein) #|| !org.employer_profile.plan_years.renewing.first.try(:is_enrollment_valid?)
        if clean_up
          employer_invoice = EmployerInvoice.new(org,@folder_name)
          employer_invoice.save_and_notify_with_clean_up
        else
          employer_invoice = EmployerInvoice.new(org,@folder_name)
          employer_invoice.save_and_notify
        end
      end
    end
  end

  desc "Generates Invoices for Conversion Employers, given FEIN"
  task generate_by_fein: :environment do

    @folder_name="DCEXCHANGE_#{TimeKeeper.date_of_record.strftime("%Y%m%d")}"

    INVOICE_LIST_BY_FEIN = ["530100390", "521335656", "274395855", "521239053", "454633007", "522226570", "753070368",
      "363834357", "521730021", "264232042", "274552853", "237173945", "521274529", "541857606", "521854372", "420707629",
      "261416892", "520914949", "731345573", "455604027", "352326309", "521672753", "521682441", "521907644", "522086842",
      "275005308", "260006459", "521197310", "521160235", "521450842", "522231780", "800410877", "522204029", "521716516",
      "204795416", "463647121", "521711168", "541192135", "272840756", "274385540", "208043889", "521674210", "043448475",
      "743238976", "731681366", "521944180", "272107952", "520743363", "522305620", "530259604", "521760808", "452374262",
      "223612212", "841303942", "521676306", "522328876", "541534910", "521754771", "520975324", "520961272", "522230721",
      "526059783", "810586347", "521569824", "743219696", "271231729", "272069679", "521532380", "522210105", "202109440",
      "521631021", "043265555", "452448760", "000000032", "521278745", "522246995", "562505765", "621618454", "720678970",
      "521750246", "522135531", "521467787", "471380784", "261661540", "522117724", "541544630", "043812274", "451658487",
      "412231503", "133843435", "521096290", "133206571", "530205861", "521232996", "272545080", "521543116", "522153329",
      "020611636", "561834887", "521818180", "522042014", "521886079", "455465523", "451144367", "261352198", "521263904",
      "521567313", "541949557", "521360378", "522092647", "521681732", "272437939", "521809804", "521724839", "112724905",
      "986001029", "830449176", "521426236", "061597668", "562587092", "204898729", "264829146", "042813873", "521094193",
      "522017020", "521431251", "521772762", "434500175", "522106882", "521738520", "521925392", "521494236", "522072106",
      "454726453", "522077143", "352247059", "020702016", "010765447", "541512865", "521765796", "522105893", "521038431",
      "541150089", "521803903", "521223909", "651276385", "364562367", "311661234", "462037519", "522070297", "462908474",
      "521320874", "522235376", "430918818", "521542164", "521932597", "132700517", "521159355", "465316906", "520851515",
      "362615221", "131580907", "521721115", "530233266", "061368627", "454888353", "522156030", "900811732", "270839790",
      "272642936", "133554791", "580188201", "461418577", "300048738", "263303115", "521216727", "521104150", "753038984",
      "262851211", "542134884", "521761004", "521170979", "383676760", "521568986", "522318206", "521739443", "521240142",
      "270458242", "530130280", "522134323", "200687819", "521763604", "260388822", "271072999", "027385594", "522312657",
      "510512189", "237421293", "521377722", "532198638", "521694437", "462548812", "463849943", "521462789", "521728688",
      "367244615", "521191891", "520953709", "521125831", "431951162", "208065449", "261324984", "364701434", "541727076",
      "521107387", "521911223", "521803319", "541947634", "680186870", "262686182", "464287935", "300814595", "521944697",
      "273358772", "522068016", "134304038", "135642032", "311684930", "352241226", "521077961", "521759052", "260081953",
      "463018149", "611581132", "521238142", "522234045", "900142687", "521870777", "510620646", "530212921", "136161455",
      "042370356", "132614920", "200019673", "369734856", "522023469", "522288484", "237275160", "521206101", "131432012",
      "264721698", "522107557", "412150366", "271153340", "273521132", "530196646", "680641322", "520805330", "521672242",
      "222566937", "133100197", "477293470", "522056528", "522165209", "061757887"]

    organizations = Organization.where(:"fein".in => INVOICE_LIST_BY_FEIN)
    organizations.each do |org|
      employer_invoice = EmployerInvoice.new(org,@folder_name)
      employer_invoice.save_and_notify
    end
    puts "creating a tar file now"
      system("tar -zcvf #{@folder_name}.tar.gz #{@folder_name}")
    puts "Folder created!"
  end
end
